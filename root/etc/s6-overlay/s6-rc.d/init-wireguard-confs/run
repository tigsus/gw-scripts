#!/usr/bin/with-contenv bash
# shellcheck shell=bash
set -e

echo "**** [INIT] Starting WireGuard container initialization ****"

# ─── Load global configuration
if [[ -f /gw-scripts/globals.env ]]; then
    echo "**** [CONFIG] Loading global config from /gw-scripts/globals.env ****"
    source /gw-scripts/globals.env
else
    echo "**** [ERROR] globals.env not found at /gw-scripts/globals.env. Aborting. ****"
    exit 1
fi

# ─── Paths and Defaults
WG_CONF_DIR="/config/wg_confs"
WG_TEMPLATE_DIR="/config/templates"
COREDNS_DIR="/config/coredns"
DEFAULT_DEVINT="${GWContainerWGDevice:-wg0}"
WG_CONF_FILE="${WG_CONF_DIR}/${DEFAULT_DEVINT}.conf"

# Normalize and validate SERVER_MODE
SERVER_MODE="${GWServerMode,,}"  # force lowercase
if [[ "$SERVER_MODE" != "true" && "$SERVER_MODE" != "false" ]]; then
    echo "**** [WARN] Invalid GWServerMode='$GWServerMode'. Defaulting to 'false'. ****"
    SERVER_MODE="false"
fi

# Normalize and validate USE_COREDNS
USE_COREDNS="${GWUseCoreDNS,,}"  # force lowercase
if [[ "$USE_COREDNS" != "true" && "$USE_COREDNS" != "false" ]]; then
    echo "**** [WARN] Invalid GWUseCoreDNS='$GWUseCoreDNS'. Defaulting to 'false'. ****"
    USE_COREDNS="false"
fi

# ─── Ensure template structure
mkdir -p "$WG_CONF_DIR" "$WG_TEMPLATE_DIR" "$COREDNS_DIR"

[[ -f ${WG_TEMPLATE_DIR}/server.conf ]] || cp /defaults/server.conf ${WG_TEMPLATE_DIR}/server.conf
[[ -f ${WG_TEMPLATE_DIR}/peer.conf ]] || cp /defaults/peer.conf ${WG_TEMPLATE_DIR}/peer.conf
[[ -f ${COREDNS_DIR}/Corefile ]] || cp /defaults/Corefile ${COREDNS_DIR}/Corefile

# ─── Determine CoreDNS use and store toggle
echo "${USE_COREDNS:-false}" > /run/s6/container_environment/USE_COREDNS

# ─── Minimal Validation Helpers
is_valid_wg_config() {
    local file="$1"
    [[ -f "$file" ]] && grep -q "\[Interface\]" "$file"
}

# ─── Server Mode Logic
if [[ "$SERVER_MODE" == "true" ]]; then
    echo "**** [MODE] Server mode selected ****"

    if ! is_valid_wg_config "$WG_CONF_FILE"; then
        echo "**** [ACTION] No valid WireGuard config found for ${DEFAULT_DEVINT}, generating a new one... ****"
        CURRENT_DIR="$(pwd)"
        cd /gw-scripts

        bash wg_server_create.sh \
            -D "${DEFAULT_DEVINT}" \
            -U "${GWExternalServerUrl}" \
            -P "${GWExternalServerPort}" \
            -N "${GWContainerWGPeerDNS:-auto}" \
            -S "${GWContainerWGSubnetMask}" \
            -A "${GWContainerWGAllowedIPs:-0.0.0.0/0}" \
            -K "${GWContainerWGPersistKeepAlive:-0}" \
            -C "${USE_COREDNS:-false}"

        cd "$CURRENT_DIR"

        if is_valid_wg_config "$WG_CONF_FILE"; then
            echo "**** [HEAL] WireGuard config successfully created for ${DEFAULT_DEVINT} ****"
        else
            echo "**** [FATAL] Failed to create valid WireGuard config for ${DEFAULT_DEVINT}. Check scripts and parameters. ****" >&2
            exit 1
        fi
    else
        echo "**** [OK] Existing valid WireGuard config found for ${DEFAULT_DEVINT}. ****"
    fi

# ─── Client Mode Logic
else
    echo "**** [MODE] Client mode selected ****"
    echo "**** [INFO] No WireGuard server initialization required. ****"

    if [[ "${USE_COREDNS}" == "true" ]]; then
        echo "**** [DNS] CoreDNS will be enabled for client mode. ****"
    else
        echo "**** [DNS] CoreDNS is disabled in client mode. ****"
    fi
fi

# ─── Permissions
lsiown -R abc:abc /config

echo "**** [COMPLETE] Container WireGuard init completed. ****"
